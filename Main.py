# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore  import pyqtSlot
import cv2 as cv
import numpy as np
from PyQt5.QtGui import QImage , QPixmap
from Register import Ui_Form1
import face_recognition
from PyQt5.QtWidgets import QMessageBox
import os
path = 'Training_images'
images = []
classNames = []
myList = os.listdir(path)
print(myList)
for cl in myList:
    curImg = cv.imread(f'{path}/{cl}')
    images.append(curImg)
    classNames.append(os.path.splitext(cl)[0])
    print(classNames)

def findEncodings(images):
    encodeList = []
    for img in images:
        img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
        encode = face_recognition.face_encodings(img)[0]
        encodeList.append(encode)
    return encodeList   
encodeListKnown = findEncodings(images)
cap = cv.VideoCapture(0)
class Ui_Form(object):

    def Register(self):
        self.window=QtWidgets.QMainWindow()
        self.ui=Ui_Form1()
        self.ui.setupUi(self.window)
        self.window.show()

    def camera(self):
        try:
            cap = cv.VideoCapture(0)
            if not cap.isOpened():
                QMessageBox.warning(QMessageBox(), 'Info', 'Not able to open camera')
                exit()
            while True:
                ret, frame = cap.read()
                imgS = cv.resize(frame, (0, 0), None, 0.25, 0.25)
                imgS = cv.cvtColor(imgS, cv.COLOR_BGR2RGB)
                facesCurFrame = face_recognition.face_locations(imgS)
                encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)

                for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
                    matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
                    name = "Unknown"
                    faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
                    
                    matchIndex = np.argmin(faceDis)

                    if matches[matchIndex]:
                        name = classNames[matchIndex].upper()
                        y1, x2, y2, x1 = faceLoc
                        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                        cv.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv.rectangle(frame, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv.FILLED)
                        cv.putText(frame, name, (x1 + 6, y2 - 6), cv.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
            
                qformat = QtGui.QImage.Format_Indexed8
                img = QImage(frame,frame.shape[1],frame.shape[0],qformat)
                self.imgLabel.setPixmap(QPixmap.fromImage(img))
                self.displayImage(frame,1)
                if cv.waitKey(1) & 0xFF == ord('q'):
                    break
        except Exception:
            pass
            #QMessageBox.warning(QMessageBox(), 'Error', 'Not able to process')    
          
    
        
    def displayImage(self,img,window=True):
        qformat = QtGui.QImage.Format_Indexed8
        if len(img.shape)==3:
            if img.shape[2]==4:
                qformat = QtGui.QImage.Format_RGBA8888
            else:
                qformat = QtGui.QImage.Format_RGB888
        outImage = QtGui.QImage(img, img.shape[1], img.shape[0], img.strides[0], qformat)
        outImage = outImage.rgbSwapped()
        if window:
            self.imgLabel.setPixmap(QtGui.QPixmap.fromImage(outImage))

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(734, 603)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(150, 510, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(490, 510, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(310, 510, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.Label = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.Label.setFont(font)
        self.Label.setLineWidth(1)
        self.Label.setTextFormat(QtCore.Qt.AutoText)
        self.Label.setObjectName("Label")
        self.Label.setGeometry(QtCore.QRect(220,6,520,40))
        self.Label.setObjectName("Label")
        self.imgLabel = QtWidgets.QLabel(Form)
        self.imgLabel.setGeometry(QtCore.QRect(70, 50, 581, 391))
        self.imgLabel.setAutoFillBackground(False)
        self.imgLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.imgLabel.setText("")
        self.imgLabel.setObjectName("imgLabel")

        self.retranslateUi(Form)
        self.pushButton.clicked.connect(self.camera)
        self.pushButton_2.clicked.connect(Form.close)
        self.pushButton_3.clicked.connect(self.Register)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Face_Recognition"))
        self.Label.setText(_translate("Form", "FACE RECOGNITION SYSTEM"))
        self.pushButton.setText(_translate("Form", "Open Camera"))
        self.pushButton_2.setText(_translate("Form", "Exit"))
        self.pushButton_3.setText(_translate("Form", "Register Face"))
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
